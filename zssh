#!/bin/bash
#
# A utility for logging into hosts in the local domain by looking up a
# substring of their hostname in the local multicast DNS i.e. using
# zeroconf. The lookup is performed by invoking zeroconf-ssh-host and
# taking the first match.
#
PLATFORM=`uname -a`
if [[ ! ${PLATFORM} =~ Darwin ]]; then
    echo "Non-Darwin platforms unsupported!"
    exit 1
fi
if [[ -z "$1" ]]; then
    echo "Usage: $0 <hostname>"
    exit 1
fi
# First process and consume flags
while [[ $1 =~ \- ]]; do
    if [[ "$1" = "-v" ]]; then
        VERBOSE=true
        shift
    fi
    if [[ "$1" = "-h" ]]; then
        USEHOSTNAME=true
        shift
    fi
done
HOST="$1"
shift
# If the address is of the form user@host then split it at the @
# symbol to get the user and the host separately
if [[ $HOST =~ \@ ]]; then
    # append the @ symbol again to make the construction of the entire
    # address easy later
    SSHUSER=`echo $HOST | awk -F "@" '{print $1}'`\@
    # the hostname is unadorned
    HOST=`echo $HOST | awk -F "@" '{print $2}'`
fi
ENTRY=`zeroconf-ssh-host "$HOST" | head -1`
if [[ -z "$ENTRY" ]]; then
    echo "Host \"$HOST\" not found"
    exit 1
fi
HN=`echo $ENTRY | awk '{print $5}'` 
IP=`echo $ENTRY | awk '{print $6}'` 
if [[ -n "$USEHOSTNAME" ]]; then
    TARGET=$HN
else 
    TARGET=$IP
fi
if [[ -n ${TARGET} ]]; then
    if [[ -n "$VERBOSE" ]]; then
        echo "Found $TARGET in local domain"
        echo "Output of \"ssh ${TARGET} ${@}\" :"
    fi
    ssh ${TARGET} $@
fi
